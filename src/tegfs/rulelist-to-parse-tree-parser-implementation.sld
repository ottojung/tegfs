(define-library (tegfs rulelist-to-parse-tree-parser-implementation) (export rulelist->parse-tree:parser:implementation) (import (scheme base)) (import (scheme char)) (import (euphrates parselynn-simple-deserialize-lists)) (begin (define rulelist->parse-tree:parser:implementation (parselynn:simple:deserialize/lists (quasiquote ((l5d989nov8cra7snamcw (unquote (quote (:grammar (rulelist = line+ line = space* "rule" space rule newline rule = antecedents consequents antecedents = tag / tag space+ antecedents / implication space+ consequents = tag / tag space+ consequents implication = "=>" tag = flat-tag / sexp-tag flat-tag = word arg* arg = equal idset idset = variable comma idset / variable sexp-tag = lbracket space* word separated-arg* space* rbracket separated-arg = space+ variable word = normal-word / quoted-word normal-word = wordc+ quoted-word = quoted wordc = alnum / "%" / "-" / "<" / ">" variable = normal-variable / quoted-variable quoted-variable = quoted / "$" normal-variable = letter alnum* / digit+ lbracket = "(" rbracket = ")" comma = "," / "+" equal = "=" / ":" alnum = letter / digit letter = (or (class alphabetic) "_") digit = (class numeric) newline = "\n" space = (class whitespace) quoted = "\"" string-inner* "\"" string-inner = "\\" (class any) / string-no-escape string-no-escape = (and (class any) (not #\") (not #\\))) :join (tag) :flatten (antecedents consequents) :inline (space) :skip (implication))))) (cqqn4gukh9w0rx195m2c (unquote (quote *serialized-lalr-scm-parser*))) (vasml2yhpvo1iq0ofir7 (unquote (quote first))) (nx8lw4j8m9qkhnks1lnb (unquote (quote lr-driver))) (ill9vlxm3pyptw40uotx (unquote (quote (uid_3 uid_4 uid_5 uid_6 uid_7 uid_8 uid_9 uid_10 uid_11 uid_12 uid_13 uid_15 uid_16 uid_18 uid_19 uid_22 uid_23 uid_24 uid_25 uid_26 uid_27 uid_28 uid_29 uid_30 uid_31)))) (qofpa1t73vde5nivj6d9 (unquote (quote ((rulelist (line+)) (line (space* uid_1 space rule newline)) (rule (antecedents consequents)) (antecedents (tag) (tag space+ antecedents) (implication space+)) (consequents (tag) (tag space+ consequents)) (implication (uid_2)) (tag (flat-tag) (sexp-tag)) (flat-tag (word arg*)) (arg (equal idset)) (idset (variable comma idset) (variable)) (sexp-tag (lbracket space* word separated-arg* space* rbracket)) (separated-arg (space+ variable)) (word (normal-word) (quoted-word)) (normal-word (wordc+)) (quoted-word (quoted)) (wordc (alnum) (uid_3) (uid_4) (uid_5) (uid_6)) (variable (normal-variable) (quoted-variable)) (quoted-variable (quoted) (uid_7)) (normal-variable (letter alnum*) (digit+)) (lbracket (uid_8)) (rbracket (uid_9)) (comma (uid_10) (uid_11)) (equal (uid_12) (uid_13)) (alnum (letter) (digit)) (letter (uid_14)) (digit (uid_15)) (newline (uid_16)) (space (uid_17)) (quoted (uid_18 string-inner* uid_18)) (string-inner (uid_19 uid_20) (string-no-escape)) (string-no-escape (uid_21)) (line+ (line line+) (line)) (space* (space space*) ()) (space+ (space space+) (space)) (arg* (arg arg*) ()) (separated-arg* (separated-arg separated-arg*) ()) (wordc+ (wordc wordc+) (wordc)) (alnum* (alnum alnum*) ()) (digit+ (digit digit+) (digit)) (string-inner* (string-inner string-inner*) ()) (uid_1 (uid_28 uid_29 uid_30 uid_31) : (string $1 $2 $3 $4)) (uid_2 (uid_12 uid_6) : (string $1 $2)) (uid_14 (uid_22) : $1 (uid_23) : $1 (uid_24) : $1 (uid_25) : $1) (uid_17 (uid_16) : $1 (uid_26) : $1) (uid_20 (uid_15) : $1 (uid_22) : $1 (uid_23) : $1 (uid_24) : $1 (uid_16) : $1 (uid_26) : $1 (uid_18) : $1 (uid_19) : $1 (uid_25) : $1 (uid_13) : $1 (uid_12) : $1 (uid_11) : $1 (uid_10) : $1 (uid_9) : $1 (uid_8) : $1 (uid_7) : $1 (uid_6) : $1 (uid_5) : $1 (uid_4) : $1 (uid_3) : $1 (uid_27) : $1) (uid_21 (uid_15) : $1 (uid_22) : $1 (uid_23) : $1 (uid_24) : $1 (uid_16) : $1 (uid_26) : $1 (uid_25) : $1 (uid_13) : $1 (uid_12) : $1 (uid_11) : $1 (uid_10) : $1 (uid_9) : $1 (uid_8) : $1 (uid_7) : $1 (uid_6) : $1 (uid_5) : $1 (uid_4) : $1 (uid_3) : $1 (uid_27) : $1))))) (obs163lvp06p9m10bwjy (unquote #())) (wgq4fdim7f2kx3zj610r (unquote (quote (let () (define (cadar l) (car (cdr (car l)))) (define (drop l n) (cond ((and (> n 0) (pair? l)) (drop (cdr l) (- n 1))) (else l))) (define (take-right l n) (drop l (- (length l) n))) (define (note-source-location lvalue tok) lvalue) (define (token? x) (and (vector? x) (= 4 (vector-length x)) (equal? (vector-ref x 0) (quote *lexical-token*)))) (define (token-category x) (vector-ref x 1)) (define (token-source x) (vector-ref x 2)) (define (token-value x) (vector-ref x 3)) (define (token-category/soft x) (if (token? x) (token-category x) x)) (define (token-source/soft x) (if (token? x) (token-source x) x)) (define (token-value/soft x) (if (token? x) (token-value x) x)) (define action-table (quote #(((*default* -53) (uid_16 2) (uid_26 1)) ((*default* -75)) ((*default* -74)) ((*default* -45)) ((*default* *error*) (uid_28 9)) ((*default* -2)) ((*default* -53) (uid_16 2) (uid_26 1)) ((*default* -51) (uid_16 2) (uid_26 1) (uid_28 -53)) ((*default* *error*) (*eoi* 13)) ((*default* *error*) (uid_29 14)) ((*default* *error*) (uid_16 2) (uid_26 1)) ((*default* -52)) ((*default* -50)) ((*default* -1) (*eoi* accept)) ((*default* *error*) (uid_30 16)) ((*default* *error*) (uid_3 28) (uid_4 27) (uid_5 26) (uid_6 25) (uid_8 24) (uid_12 23) (uid_15 22) (uid_18 21) (uid_22 20) (uid_23 19) (uid_24 18) (uid_25 17)) ((*default* *error*) (uid_31 47)) ((*default* -73)) ((*default* -72)) ((*default* -71)) ((*default* -70)) ((*default* -67) (uid_3 67) (uid_4 66) (uid_5 65) (uid_6 64) (uid_7 63) (uid_8 62) (uid_9 61) (uid_10 60) (uid_11 59) (uid_12 58) (uid_13 57) (uid_15 56) (uid_16 55) (uid_19 54) (uid_22 53) (uid_23 52) (uid_24 51) (uid_25 50) (uid_26 49) (uid_27 48)) ((*default* -43)) ((*default* *error*) (uid_6 72)) ((*default* -34)) ((*default* -27)) ((*default* -26)) ((*default* -25)) ((*default* -24)) ((*default* -42)) ((*default* -10)) ((*default* -21)) ((*default* -22)) ((*default* -41)) ((*default* -40)) ((*default* -23)) ((*default* -53) (uid_16 2) (uid_26 1)) ((*default* -61) (uid_3 28) (uid_4 27) (uid_5 26) (uid_6 25) (uid_15 22) (uid_22 20) (uid_23 19) (uid_24 18) (uid_25 17)) ((*default* -20)) ((*default* -19)) ((*default* -57) (uid_12 76) (uid_13 75)) ((*default* -12)) ((*default* -11)) ((*default* -5) (uid_16 2) (uid_26 1)) ((*default* *error*) (uid_16 2) (uid_26 1)) ((*default* *error*) (uid_3 28) (uid_4 27) (uid_5 26) (uid_6 25) (uid_8 24) (uid_15 22) (uid_18 21) (uid_22 20) (uid_23 19) (uid_24 18) (uid_25 17)) ((*default* *error*) (uid_16 85)) ((*default* -68)) ((*default* -115)) ((*default* -102)) ((*default* -103)) ((*default* -100)) ((*default* -99)) ((*default* -98)) ((*default* *error*) (uid_3 107) (uid_4 106) (uid_5 105) (uid_6 104) (uid_7 103) (uid_8 102) (uid_9 101) (uid_10 100) (uid_11 99) (uid_12 98) (uid_13 97) (uid_15 96) (uid_16 95) (uid_18 94) (uid_19 93) (uid_22 92) (uid_23 91) (uid_24 90) (uid_25 89) (uid_26 88) (uid_27 87)) ((*default* -101)) ((*default* -97)) ((*default* -104)) ((*default* -105)) ((*default* -106)) ((*default* -107)) ((*default* -108)) ((*default* -109)) ((*default* -110)) ((*default* -111)) ((*default* -112)) ((*default* -113)) ((*default* -114)) ((*default* -49)) ((*default* *error*) (uid_18 109)) ((*default* -48)) ((*default* -67) (uid_3 67) (uid_4 66) (uid_5 65) (uid_6 64) (uid_7 63) (uid_8 62) (uid_9 61) (uid_10 60) (uid_11 59) (uid_12 58) (uid_13 57) (uid_15 56) (uid_16 55) (uid_19 54) (uid_22 53) (uid_23 52) (uid_24 51) (uid_25 50) (uid_26 49) (uid_27 48)) ((*default* -69)) ((*default* *error*) (uid_3 28) (uid_4 27) (uid_5 26) (uid_6 25) (uid_15 22) (uid_18 21) (uid_22 20) (uid_23 19) (uid_24 18) (uid_25 17)) ((*default* -60)) ((*default* -39)) ((*default* -38)) ((*default* -13)) ((*default* *error*) (uid_7 112) (uid_15 22) (uid_18 21) (uid_22 20) (uid_23 19) (uid_24 18) (uid_25 17)) ((*default* -57) (uid_12 76) (uid_13 75)) ((*default* *error*) (uid_3 28) (uid_4 27) (uid_5 26) (uid_6 25) (uid_8 24) (uid_12 23) (uid_15 22) (uid_18 21) (uid_22 20) (uid_23 19) (uid_24 18) (uid_25 17)) ((*default* -55) (uid_16 2) (uid_26 1)) ((*default* -7)) ((*default* -8) (uid_16 2) (uid_26 1)) ((*default* -4)) ((*default* -44)) ((*default* -3)) ((*default* -96)) ((*default* -81)) ((*default* -84)) ((*default* -79)) ((*default* -78)) ((*default* -77)) ((*default* -83)) ((*default* -82)) ((*default* -80)) ((*default* -76)) ((*default* -85)) ((*default* -86)) ((*default* -87)) ((*default* -88)) ((*default* -89)) ((*default* -90)) ((*default* -91)) ((*default* -92)) ((*default* -93)) ((*default* -94)) ((*default* -95)) ((*default* -47)) ((*default* -46)) ((*default* -66)) ((*default* -59) (uid_16 2) (uid_26 1)) ((*default* -31)) ((*default* -33)) ((*default* -30)) ((*default* -65) (uid_15 22)) ((*default* -63) (uid_15 22) (uid_22 20) (uid_23 19) (uid_24 18) (uid_25 17)) ((*default* -28)) ((*default* -29)) ((*default* -16) (uid_10 132) (uid_11 131)) ((*default* -14)) ((*default* -56)) ((*default* -6)) ((*default* -54)) ((*default* *error*) (uid_3 28) (uid_4 27) (uid_5 26) (uid_6 25) (uid_8 24) (uid_15 22) (uid_18 21) (uid_22 20) (uid_23 19) (uid_24 18) (uid_25 17)) ((*default* -53) (uid_16 2) (uid_26 1)) ((*default* *error*) (uid_7 112) (uid_15 22) (uid_18 21) (uid_22 20) (uid_23 19) (uid_24 18) (uid_25 17)) ((*default* -59) (uid_16 2) (uid_26 1)) ((*default* -64)) ((*default* -32)) ((*default* -63) (uid_15 22) (uid_22 20) (uid_23 19) (uid_24 18) (uid_25 17)) ((*default* -37)) ((*default* -36)) ((*default* *error*) (uid_7 112) (uid_15 22) (uid_18 21) (uid_22 20) (uid_23 19) (uid_24 18) (uid_25 17)) ((*default* -9)) ((*default* *error*) (uid_9 140)) ((*default* -18)) ((*default* -58)) ((*default* -62)) ((*default* -15)) ((*default* -35)) ((*default* -17))))) (define goto-table (vector (quote ((44 . 3) (33 . 4) (32 . 5) (28 . 6) (2 . 7) (1 . 8))) (quote ()) (quote ()) (quote ()) (quote ((41 . 10))) (quote ()) (quote ((44 . 3) (33 . 11) (28 . 6))) (quote ((44 . 3) (33 . 4) (32 . 12) (28 . 6) (2 . 7))) (quote ()) (quote ()) (quote ((44 . 3) (28 . 15))) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((43 . 29) (42 . 30) (37 . 31) (29 . 32) (26 . 33) (25 . 34) (24 . 35) (20 . 36) (16 . 37) (15 . 38) (14 . 39) (13 . 40) (11 . 41) (8 . 42) (7 . 43) (6 . 44) (4 . 45) (3 . 46))) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((46 . 68) (40 . 69) (31 . 70) (30 . 71))) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((44 . 3) (33 . 73) (28 . 6))) (quote ((43 . 29) (37 . 74) (26 . 33) (25 . 34) (24 . 35) (16 . 37))) (quote ()) (quote ()) (quote ((35 . 77) (23 . 78) (9 . 79))) (quote ()) (quote ()) (quote ((44 . 3) (34 . 80) (28 . 81))) (quote ((44 . 3) (34 . 82) (28 . 81))) (quote ((43 . 29) (37 . 31) (29 . 32) (26 . 33) (25 . 34) (24 . 35) (20 . 36) (16 . 37) (15 . 38) (14 . 39) (13 . 40) (11 . 41) (8 . 42) (7 . 83) (5 . 84))) (quote ((27 . 86))) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((45 . 108))) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((46 . 68) (40 . 110) (31 . 70) (30 . 71))) (quote ()) (quote ((43 . 29) (37 . 31) (29 . 32) (26 . 33) (25 . 34) (24 . 35) (16 . 37) (15 . 38) (14 . 39) (13 . 111))) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((43 . 29) (39 . 113) (29 . 114) (26 . 115) (25 . 116) (19 . 117) (18 . 118) (17 . 119) (10 . 120))) (quote ((35 . 121) (23 . 78) (9 . 79))) (quote ((43 . 29) (42 . 30) (37 . 31) (29 . 32) (26 . 33) (25 . 34) (24 . 35) (20 . 36) (16 . 37) (15 . 38) (14 . 39) (13 . 40) (11 . 41) (8 . 42) (7 . 43) (6 . 44) (4 . 122))) (quote ((44 . 3) (34 . 123) (28 . 81))) (quote ()) (quote ((44 . 3) (34 . 124) (28 . 81))) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((44 . 3) (36 . 125) (34 . 126) (28 . 81) (12 . 127))) (quote ()) (quote ()) (quote ()) (quote ((39 . 128) (26 . 115))) (quote ((43 . 29) (38 . 129) (26 . 33) (25 . 34) (24 . 130))) (quote ()) (quote ()) (quote ((22 . 133))) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((43 . 29) (37 . 31) (29 . 32) (26 . 33) (25 . 34) (24 . 35) (20 . 36) (16 . 37) (15 . 38) (14 . 39) (13 . 40) (11 . 41) (8 . 42) (7 . 83) (5 . 134))) (quote ((44 . 3) (33 . 135) (28 . 6))) (quote ((43 . 29) (39 . 113) (29 . 114) (26 . 115) (25 . 116) (19 . 117) (18 . 118) (17 . 136))) (quote ((44 . 3) (36 . 137) (34 . 126) (28 . 81) (12 . 127))) (quote ()) (quote ()) (quote ((43 . 29) (38 . 138) (26 . 33) (25 . 34) (24 . 130))) (quote ()) (quote ()) (quote ((43 . 29) (39 . 113) (29 . 114) (26 . 115) (25 . 116) (19 . 117) (18 . 118) (17 . 119) (10 . 139))) (quote ()) (quote ((21 . 141))) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()))) (lambda (actions) (define (external index . args) (apply (vector-ref actions index) args)) (define reduction-table (vector (quote ()) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) $1)) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 1 (list (quote rulelist) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($5 (token-value/soft tok)) (@5 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($4 (token-value/soft tok)) (@4 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 5))) ($3 (token-value/soft tok)) (@3 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 7))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 9))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 5 2 (list (quote line) $1 $2 $3 $4 $5) (vector-ref ___stack (- ___sp 5))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 2 3 (list (quote rule) $1 $2) (vector-ref ___stack (- ___sp 2))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 4 (list (quote antecedents) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($3 (token-value/soft tok)) (@3 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 5))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 3 4 (list (quote antecedents) $1 $2 $3) (vector-ref ___stack (- ___sp 3))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 2 4 (list (quote antecedents) $1 $2) (vector-ref ___stack (- ___sp 2))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 5 (list (quote consequents) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($3 (token-value/soft tok)) (@3 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 5))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 3 5 (list (quote consequents) $1 $2 $3) (vector-ref ___stack (- ___sp 3))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 6 (list (quote implication) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 7 (list (quote tag) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 7 (list (quote tag) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 2 8 (list (quote flat-tag) $1 $2) (vector-ref ___stack (- ___sp 2))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 2 9 (list (quote arg) $1 $2) (vector-ref ___stack (- ___sp 2))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($3 (token-value/soft tok)) (@3 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 5))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 3 10 (list (quote idset) $1 $2 $3) (vector-ref ___stack (- ___sp 3))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 10 (list (quote idset) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($6 (token-value/soft tok)) (@6 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($5 (token-value/soft tok)) (@5 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 5))) ($4 (token-value/soft tok)) (@4 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 7))) ($3 (token-value/soft tok)) (@3 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 9))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 11))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 6 11 (list (quote sexp-tag) $1 $2 $3 $4 $5 $6) (vector-ref ___stack (- ___sp 6))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 2 12 (list (quote separated-arg) $1 $2) (vector-ref ___stack (- ___sp 2))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 13 (list (quote word) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 13 (list (quote word) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 14 (list (quote normal-word) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 15 (list (quote quoted-word) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 16 (list (quote wordc) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 16 (list (quote wordc) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 16 (list (quote wordc) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 16 (list (quote wordc) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 16 (list (quote wordc) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 17 (list (quote variable) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 17 (list (quote variable) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 18 (list (quote quoted-variable) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 18 (list (quote quoted-variable) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 2 19 (list (quote normal-variable) $1 $2) (vector-ref ___stack (- ___sp 2))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 19 (list (quote normal-variable) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 20 (list (quote lbracket) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 21 (list (quote rbracket) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 22 (list (quote comma) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 22 (list (quote comma) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 23 (list (quote equal) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 23 (list (quote equal) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 24 (list (quote alnum) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 24 (list (quote alnum) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 25 (list (quote letter) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 26 (list (quote digit) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 27 (list (quote newline) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 28 (list (quote space) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($3 (token-value/soft tok)) (@3 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 5))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 3 29 (list (quote quoted) $1 $2 $3) (vector-ref ___stack (- ___sp 3))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 2 30 (list (quote string-inner) $1 $2) (vector-ref ___stack (- ___sp 2))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 30 (list (quote string-inner) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 31 (list (quote string-no-escape) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 2 32 (list (quote line+) $1 $2) (vector-ref ___stack (- ___sp 2))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 32 (list (quote line+) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 2 33 (list (quote space*) $1 $2) (vector-ref ___stack (- ___sp 2))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* () (___push 0 33 (list (quote space*)) (vector-ref ___stack (- ___sp 0))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 2 34 (list (quote space+) $1 $2) (vector-ref ___stack (- ___sp 2))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 34 (list (quote space+) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 2 35 (list (quote arg*) $1 $2) (vector-ref ___stack (- ___sp 2))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* () (___push 0 35 (list (quote arg*)) (vector-ref ___stack (- ___sp 0))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 2 36 (list (quote separated-arg*) $1 $2) (vector-ref ___stack (- ___sp 2))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* () (___push 0 36 (list (quote separated-arg*)) (vector-ref ___stack (- ___sp 0))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 2 37 (list (quote wordc+) $1 $2) (vector-ref ___stack (- ___sp 2))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 37 (list (quote wordc+) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 2 38 (list (quote alnum*) $1 $2) (vector-ref ___stack (- ___sp 2))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* () (___push 0 38 (list (quote alnum*)) (vector-ref ___stack (- ___sp 0))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 2 39 (list (quote digit+) $1 $2) (vector-ref ___stack (- ___sp 2))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 39 (list (quote digit+) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 2 40 (list (quote string-inner*) $1 $2) (vector-ref ___stack (- ___sp 2))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* () (___push 0 40 (list (quote string-inner*)) (vector-ref ___stack (- ___sp 0))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($4 (token-value/soft tok)) (@4 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($3 (token-value/soft tok)) (@3 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 5))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 7))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 4 41 (string $1 $2 $3 $4) (vector-ref ___stack (- ___sp 4))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 2 42 (string $1 $2) (vector-ref ___stack (- ___sp 2))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 43 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 43 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 43 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 43 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 44 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 44 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 45 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 45 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 45 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 45 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 45 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 45 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 45 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 45 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 45 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 45 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 45 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 45 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 45 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 45 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 45 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 45 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 45 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 45 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 45 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 45 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 45 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 46 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 46 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 46 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 46 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 46 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 46 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 46 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 46 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 46 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 46 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 46 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 46 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 46 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 46 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 46 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 46 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 46 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 46 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 46 $1 (vector-ref ___stack (- ___sp 1))))))) (lambda (___scanner ___errorp) (define get-next-token (let () (define evaluator (lambda (x) (cond ((equal? x #\%) (quote uid_3)) ((equal? x #\-) (quote uid_4)) ((equal? x #\<) (quote uid_5)) ((equal? x #\>) (quote uid_6)) ((equal? x #\$) (quote uid_7)) ((equal? x #\() (quote uid_8)) ((equal? x #\)) (quote uid_9)) ((equal? x #\,) (quote uid_10)) ((equal? x #\+) (quote uid_11)) ((equal? x #\=) (quote uid_12)) ((equal? x #\:) (quote uid_13)) ((equal? x #\newline) (quote uid_16)) ((equal? x #\") (quote uid_18)) ((equal? x #\\) (quote uid_19)) ((equal? x #\_) (quote uid_25)) ((equal? x #\r) (quote uid_28)) ((equal? x #\u) (quote uid_29)) ((equal? x #\l) (quote uid_30)) ((equal? x #\e) (quote uid_31)) (((lambda (c) (and (char? c) (char-numeric? c))) x) (quote uid_15)) (((lambda (c) (and (char? c) (char-alphabetic? c) (char-upper-case? c))) x) (quote uid_22)) (((lambda (c) (and (char? c) (char-alphabetic? c) (char-lower-case? c))) x) (quote uid_23)) (((lambda (c) (and (char? c) (char-alphabetic? c) (not (char-upper-case? c)) (not (char-lower-case? c)))) x) (quote uid_24)) ((and ((lambda (c) (and (char? c) (char-whitespace? c))) x) (not (equal? x #\newline))) (quote uid_26)) ((and ((lambda (c) (and (char? c) (not (char-alphabetic? c)) (not (char-numeric? c)) (not (char-whitespace? c)))) x) (not (equal? x #\")) (not (equal? x #\\)) (not (equal? x #\_)) (not (equal? x #\:)) (not (equal? x #\=)) (not (equal? x #\+)) (not (equal? x #\,)) (not (equal? x #\))) (not (equal? x #\()) (not (equal? x #\$)) (not (equal? x #\>)) (not (equal? x #\<)) (not (equal? x #\-)) (not (equal? x #\%))) (quote uid_27)) (else #f)))) (define offset 0) (define linenum 0) (define colnum 0) (define (adjust-positions! c) (set! offset (+ offset 1)) (define nl? (equal? c #\newline)) (when nl? (set! linenum (+ linenum 1))) (set! colnum (if nl? 0 (+ 1 colnum)))) (define read-next-char (cond ((string? ___scanner) (let ((input-length (string-length ___scanner))) (lambda _ (if (>= offset input-length) (eof-object) (string-ref ___scanner offset))))) ((port? ___scanner) (lambda _ (read-char ___scanner))) ((procedure? ___scanner) ___scanner) (else (___errorp (quote unsupported-input-type) "Type error: unsupported input type: ~s" ___scanner)))) (define parselynn:token:typetag (quote *lexical-token*)) (define (parselynn:token:make category source value) (vector parselynn:token:typetag category source value)) (define (wrap-return c category) (define location (vector (quote *stdin*) linenum colnum offset 1)) (parselynn:token:make category location c)) (lambda args (define c (read-next-char)) (if (eof-object? c) (quote *eoi*) (let () (define category (or (evaluator c) (___errorp (quote unrecognized-input) "Type error: unrecognized input: ~s" c))) (adjust-positions! c) (wrap-return c category)))))) (define *initial-stack-size* 500) (define ___atable action-table) (define ___gtable goto-table) (define ___rtable reduction-table) (define ___stack #f) (define ___sp 0) (define ___curr-input #f) (define ___reuse-input #f) (define ___input #f) (define (___consume) (set! ___input (if ___reuse-input ___curr-input (get-next-token))) (set! ___reuse-input #f) (set! ___curr-input ___input)) (define (___pushback) (set! ___reuse-input #t)) (define (___initstack) (set! ___stack (make-vector *initial-stack-size* 0)) (set! ___sp 0)) (define (___growstack) (let ((new-stack (make-vector (* 2 (vector-length ___stack)) 0))) (let loop ((i (- (vector-length ___stack) 1))) (if (>= i 0) (begin (vector-set! new-stack i (vector-ref ___stack i)) (loop (- i 1))))) (set! ___stack new-stack))) (define (___checkstack) (if (>= ___sp (vector-length ___stack)) (___growstack))) (define (___push delta new-category lvalue tok) (set! ___sp (- ___sp (* delta 2))) (let* ((state (vector-ref ___stack ___sp)) (new-state (cdr (assoc new-category (vector-ref ___gtable state))))) (set! ___sp (+ ___sp 2)) (___checkstack) (vector-set! ___stack ___sp new-state) (vector-set! ___stack (- ___sp 1) (note-source-location lvalue tok)))) (define (___reduce st) ((vector-ref ___rtable st) ___stack ___sp ___gtable ___push ___pushback)) (define (___shift token attribute) (set! ___sp (+ ___sp 2)) (___checkstack) (vector-set! ___stack (- ___sp 1) attribute) (vector-set! ___stack ___sp token)) (define (___action x l) (let ((y (assoc x l))) (if y (cadr y) (cadar l)))) (define (___recover tok) (let find-state ((sp ___sp)) (if (< sp 0) (set! ___sp sp) (let* ((state (vector-ref ___stack sp)) (act (assoc (quote error) (vector-ref ___atable state)))) (if act (begin (set! ___sp sp) (___sync (cadr act) tok)) (find-state (- sp 2))))))) (define (___sync state tok) (let ((sync-set (map car (cdr (vector-ref ___atable state))))) (set! ___sp (+ ___sp 4)) (___checkstack) (vector-set! ___stack (- ___sp 3) #f) (vector-set! ___stack (- ___sp 2) state) (let skip () (let ((i (token-category/soft ___input))) (if (equal? i (quote *eoi*)) (set! ___sp -1) (if (memq i sync-set) (let ((act (assoc i (vector-ref ___atable state)))) (vector-set! ___stack (- ___sp 1) #f) (vector-set! ___stack ___sp (cadr act))) (begin (___consume) (skip)))))))) (define (___run) (let loop () (if ___input (let* ((state (vector-ref ___stack ___sp)) (i (token-category/soft ___input)) (act (___action i (vector-ref ___atable state)))) (cond ((not (symbol? i)) (when ___errorp (___errorp (quote invalid-token) "Syntax error: invalid token: ~s" ___input)) #f) ((equal? act (quote accept)) (vector-ref ___stack 1)) ((equal? act (quote *error*)) (if (equal? i (quote *eoi*)) (begin (when ___errorp (___errorp (quote end-of-input) "Syntax error: unexpected end of input: ~s" ___input)) #f) (begin (when ___errorp (___errorp (quote unexpected-token) "Syntax error: unexpected token: ~s" ___input)) (___recover i) (if (>= ___sp 0) (set! ___input #f) (begin (set! ___sp 0) (set! ___input (quote *eoi*)))) (loop)))) ((>= act 0) (___shift act ___input) (set! ___input (if (equal? i (quote *eoi*)) (quote *eoi*) #f)) (loop)) (else (___reduce (- act)) (loop)))) (let* ((state (vector-ref ___stack ___sp)) (acts (vector-ref ___atable state)) (defact (if (pair? acts) (cadar acts) #f))) (if (and (= 1 (length acts)) (< defact 0)) (___reduce (- defact)) (___consume)) (loop))))) (set! ___input #f) (set! ___reuse-input #f) (___initstack) (___run))))))) (i3bpqtlnzqjz8ileyrpt (unquote ((let () (define (cadar l) (car (cdr (car l)))) (define (drop l n) (cond ((and (> n 0) (pair? l)) (drop (cdr l) (- n 1))) (else l))) (define (take-right l n) (drop l (- (length l) n))) (define (note-source-location lvalue tok) lvalue) (define (token? x) (and (vector? x) (= 4 (vector-length x)) (equal? (vector-ref x 0) (quote *lexical-token*)))) (define (token-category x) (vector-ref x 1)) (define (token-source x) (vector-ref x 2)) (define (token-value x) (vector-ref x 3)) (define (token-category/soft x) (if (token? x) (token-category x) x)) (define (token-source/soft x) (if (token? x) (token-source x) x)) (define (token-value/soft x) (if (token? x) (token-value x) x)) (define action-table (quote #(((*default* -53) (uid_16 2) (uid_26 1)) ((*default* -75)) ((*default* -74)) ((*default* -45)) ((*default* *error*) (uid_28 9)) ((*default* -2)) ((*default* -53) (uid_16 2) (uid_26 1)) ((*default* -51) (uid_16 2) (uid_26 1) (uid_28 -53)) ((*default* *error*) (*eoi* 13)) ((*default* *error*) (uid_29 14)) ((*default* *error*) (uid_16 2) (uid_26 1)) ((*default* -52)) ((*default* -50)) ((*default* -1) (*eoi* accept)) ((*default* *error*) (uid_30 16)) ((*default* *error*) (uid_3 28) (uid_4 27) (uid_5 26) (uid_6 25) (uid_8 24) (uid_12 23) (uid_15 22) (uid_18 21) (uid_22 20) (uid_23 19) (uid_24 18) (uid_25 17)) ((*default* *error*) (uid_31 47)) ((*default* -73)) ((*default* -72)) ((*default* -71)) ((*default* -70)) ((*default* -67) (uid_3 67) (uid_4 66) (uid_5 65) (uid_6 64) (uid_7 63) (uid_8 62) (uid_9 61) (uid_10 60) (uid_11 59) (uid_12 58) (uid_13 57) (uid_15 56) (uid_16 55) (uid_19 54) (uid_22 53) (uid_23 52) (uid_24 51) (uid_25 50) (uid_26 49) (uid_27 48)) ((*default* -43)) ((*default* *error*) (uid_6 72)) ((*default* -34)) ((*default* -27)) ((*default* -26)) ((*default* -25)) ((*default* -24)) ((*default* -42)) ((*default* -10)) ((*default* -21)) ((*default* -22)) ((*default* -41)) ((*default* -40)) ((*default* -23)) ((*default* -53) (uid_16 2) (uid_26 1)) ((*default* -61) (uid_3 28) (uid_4 27) (uid_5 26) (uid_6 25) (uid_15 22) (uid_22 20) (uid_23 19) (uid_24 18) (uid_25 17)) ((*default* -20)) ((*default* -19)) ((*default* -57) (uid_12 76) (uid_13 75)) ((*default* -12)) ((*default* -11)) ((*default* -5) (uid_16 2) (uid_26 1)) ((*default* *error*) (uid_16 2) (uid_26 1)) ((*default* *error*) (uid_3 28) (uid_4 27) (uid_5 26) (uid_6 25) (uid_8 24) (uid_15 22) (uid_18 21) (uid_22 20) (uid_23 19) (uid_24 18) (uid_25 17)) ((*default* *error*) (uid_16 85)) ((*default* -68)) ((*default* -115)) ((*default* -102)) ((*default* -103)) ((*default* -100)) ((*default* -99)) ((*default* -98)) ((*default* *error*) (uid_3 107) (uid_4 106) (uid_5 105) (uid_6 104) (uid_7 103) (uid_8 102) (uid_9 101) (uid_10 100) (uid_11 99) (uid_12 98) (uid_13 97) (uid_15 96) (uid_16 95) (uid_18 94) (uid_19 93) (uid_22 92) (uid_23 91) (uid_24 90) (uid_25 89) (uid_26 88) (uid_27 87)) ((*default* -101)) ((*default* -97)) ((*default* -104)) ((*default* -105)) ((*default* -106)) ((*default* -107)) ((*default* -108)) ((*default* -109)) ((*default* -110)) ((*default* -111)) ((*default* -112)) ((*default* -113)) ((*default* -114)) ((*default* -49)) ((*default* *error*) (uid_18 109)) ((*default* -48)) ((*default* -67) (uid_3 67) (uid_4 66) (uid_5 65) (uid_6 64) (uid_7 63) (uid_8 62) (uid_9 61) (uid_10 60) (uid_11 59) (uid_12 58) (uid_13 57) (uid_15 56) (uid_16 55) (uid_19 54) (uid_22 53) (uid_23 52) (uid_24 51) (uid_25 50) (uid_26 49) (uid_27 48)) ((*default* -69)) ((*default* *error*) (uid_3 28) (uid_4 27) (uid_5 26) (uid_6 25) (uid_15 22) (uid_18 21) (uid_22 20) (uid_23 19) (uid_24 18) (uid_25 17)) ((*default* -60)) ((*default* -39)) ((*default* -38)) ((*default* -13)) ((*default* *error*) (uid_7 112) (uid_15 22) (uid_18 21) (uid_22 20) (uid_23 19) (uid_24 18) (uid_25 17)) ((*default* -57) (uid_12 76) (uid_13 75)) ((*default* *error*) (uid_3 28) (uid_4 27) (uid_5 26) (uid_6 25) (uid_8 24) (uid_12 23) (uid_15 22) (uid_18 21) (uid_22 20) (uid_23 19) (uid_24 18) (uid_25 17)) ((*default* -55) (uid_16 2) (uid_26 1)) ((*default* -7)) ((*default* -8) (uid_16 2) (uid_26 1)) ((*default* -4)) ((*default* -44)) ((*default* -3)) ((*default* -96)) ((*default* -81)) ((*default* -84)) ((*default* -79)) ((*default* -78)) ((*default* -77)) ((*default* -83)) ((*default* -82)) ((*default* -80)) ((*default* -76)) ((*default* -85)) ((*default* -86)) ((*default* -87)) ((*default* -88)) ((*default* -89)) ((*default* -90)) ((*default* -91)) ((*default* -92)) ((*default* -93)) ((*default* -94)) ((*default* -95)) ((*default* -47)) ((*default* -46)) ((*default* -66)) ((*default* -59) (uid_16 2) (uid_26 1)) ((*default* -31)) ((*default* -33)) ((*default* -30)) ((*default* -65) (uid_15 22)) ((*default* -63) (uid_15 22) (uid_22 20) (uid_23 19) (uid_24 18) (uid_25 17)) ((*default* -28)) ((*default* -29)) ((*default* -16) (uid_10 132) (uid_11 131)) ((*default* -14)) ((*default* -56)) ((*default* -6)) ((*default* -54)) ((*default* *error*) (uid_3 28) (uid_4 27) (uid_5 26) (uid_6 25) (uid_8 24) (uid_15 22) (uid_18 21) (uid_22 20) (uid_23 19) (uid_24 18) (uid_25 17)) ((*default* -53) (uid_16 2) (uid_26 1)) ((*default* *error*) (uid_7 112) (uid_15 22) (uid_18 21) (uid_22 20) (uid_23 19) (uid_24 18) (uid_25 17)) ((*default* -59) (uid_16 2) (uid_26 1)) ((*default* -64)) ((*default* -32)) ((*default* -63) (uid_15 22) (uid_22 20) (uid_23 19) (uid_24 18) (uid_25 17)) ((*default* -37)) ((*default* -36)) ((*default* *error*) (uid_7 112) (uid_15 22) (uid_18 21) (uid_22 20) (uid_23 19) (uid_24 18) (uid_25 17)) ((*default* -9)) ((*default* *error*) (uid_9 140)) ((*default* -18)) ((*default* -58)) ((*default* -62)) ((*default* -15)) ((*default* -35)) ((*default* -17))))) (define goto-table (vector (quote ((44 . 3) (33 . 4) (32 . 5) (28 . 6) (2 . 7) (1 . 8))) (quote ()) (quote ()) (quote ()) (quote ((41 . 10))) (quote ()) (quote ((44 . 3) (33 . 11) (28 . 6))) (quote ((44 . 3) (33 . 4) (32 . 12) (28 . 6) (2 . 7))) (quote ()) (quote ()) (quote ((44 . 3) (28 . 15))) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((43 . 29) (42 . 30) (37 . 31) (29 . 32) (26 . 33) (25 . 34) (24 . 35) (20 . 36) (16 . 37) (15 . 38) (14 . 39) (13 . 40) (11 . 41) (8 . 42) (7 . 43) (6 . 44) (4 . 45) (3 . 46))) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((46 . 68) (40 . 69) (31 . 70) (30 . 71))) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((44 . 3) (33 . 73) (28 . 6))) (quote ((43 . 29) (37 . 74) (26 . 33) (25 . 34) (24 . 35) (16 . 37))) (quote ()) (quote ()) (quote ((35 . 77) (23 . 78) (9 . 79))) (quote ()) (quote ()) (quote ((44 . 3) (34 . 80) (28 . 81))) (quote ((44 . 3) (34 . 82) (28 . 81))) (quote ((43 . 29) (37 . 31) (29 . 32) (26 . 33) (25 . 34) (24 . 35) (20 . 36) (16 . 37) (15 . 38) (14 . 39) (13 . 40) (11 . 41) (8 . 42) (7 . 83) (5 . 84))) (quote ((27 . 86))) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((45 . 108))) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((46 . 68) (40 . 110) (31 . 70) (30 . 71))) (quote ()) (quote ((43 . 29) (37 . 31) (29 . 32) (26 . 33) (25 . 34) (24 . 35) (16 . 37) (15 . 38) (14 . 39) (13 . 111))) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((43 . 29) (39 . 113) (29 . 114) (26 . 115) (25 . 116) (19 . 117) (18 . 118) (17 . 119) (10 . 120))) (quote ((35 . 121) (23 . 78) (9 . 79))) (quote ((43 . 29) (42 . 30) (37 . 31) (29 . 32) (26 . 33) (25 . 34) (24 . 35) (20 . 36) (16 . 37) (15 . 38) (14 . 39) (13 . 40) (11 . 41) (8 . 42) (7 . 43) (6 . 44) (4 . 122))) (quote ((44 . 3) (34 . 123) (28 . 81))) (quote ()) (quote ((44 . 3) (34 . 124) (28 . 81))) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((44 . 3) (36 . 125) (34 . 126) (28 . 81) (12 . 127))) (quote ()) (quote ()) (quote ()) (quote ((39 . 128) (26 . 115))) (quote ((43 . 29) (38 . 129) (26 . 33) (25 . 34) (24 . 130))) (quote ()) (quote ()) (quote ((22 . 133))) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((43 . 29) (37 . 31) (29 . 32) (26 . 33) (25 . 34) (24 . 35) (20 . 36) (16 . 37) (15 . 38) (14 . 39) (13 . 40) (11 . 41) (8 . 42) (7 . 83) (5 . 134))) (quote ((44 . 3) (33 . 135) (28 . 6))) (quote ((43 . 29) (39 . 113) (29 . 114) (26 . 115) (25 . 116) (19 . 117) (18 . 118) (17 . 136))) (quote ((44 . 3) (36 . 137) (34 . 126) (28 . 81) (12 . 127))) (quote ()) (quote ()) (quote ((43 . 29) (38 . 138) (26 . 33) (25 . 34) (24 . 130))) (quote ()) (quote ()) (quote ((43 . 29) (39 . 113) (29 . 114) (26 . 115) (25 . 116) (19 . 117) (18 . 118) (17 . 119) (10 . 139))) (quote ()) (quote ((21 . 141))) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()))) (lambda (actions) (define (external index . args) (apply (vector-ref actions index) args)) (define reduction-table (vector (quote ()) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) $1)) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 1 (list (quote rulelist) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($5 (token-value/soft tok)) (@5 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($4 (token-value/soft tok)) (@4 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 5))) ($3 (token-value/soft tok)) (@3 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 7))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 9))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 5 2 (list (quote line) $1 $2 $3 $4 $5) (vector-ref ___stack (- ___sp 5))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 2 3 (list (quote rule) $1 $2) (vector-ref ___stack (- ___sp 2))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 4 (list (quote antecedents) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($3 (token-value/soft tok)) (@3 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 5))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 3 4 (list (quote antecedents) $1 $2 $3) (vector-ref ___stack (- ___sp 3))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 2 4 (list (quote antecedents) $1 $2) (vector-ref ___stack (- ___sp 2))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 5 (list (quote consequents) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($3 (token-value/soft tok)) (@3 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 5))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 3 5 (list (quote consequents) $1 $2 $3) (vector-ref ___stack (- ___sp 3))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 6 (list (quote implication) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 7 (list (quote tag) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 7 (list (quote tag) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 2 8 (list (quote flat-tag) $1 $2) (vector-ref ___stack (- ___sp 2))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 2 9 (list (quote arg) $1 $2) (vector-ref ___stack (- ___sp 2))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($3 (token-value/soft tok)) (@3 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 5))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 3 10 (list (quote idset) $1 $2 $3) (vector-ref ___stack (- ___sp 3))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 10 (list (quote idset) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($6 (token-value/soft tok)) (@6 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($5 (token-value/soft tok)) (@5 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 5))) ($4 (token-value/soft tok)) (@4 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 7))) ($3 (token-value/soft tok)) (@3 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 9))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 11))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 6 11 (list (quote sexp-tag) $1 $2 $3 $4 $5 $6) (vector-ref ___stack (- ___sp 6))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 2 12 (list (quote separated-arg) $1 $2) (vector-ref ___stack (- ___sp 2))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 13 (list (quote word) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 13 (list (quote word) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 14 (list (quote normal-word) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 15 (list (quote quoted-word) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 16 (list (quote wordc) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 16 (list (quote wordc) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 16 (list (quote wordc) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 16 (list (quote wordc) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 16 (list (quote wordc) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 17 (list (quote variable) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 17 (list (quote variable) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 18 (list (quote quoted-variable) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 18 (list (quote quoted-variable) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 2 19 (list (quote normal-variable) $1 $2) (vector-ref ___stack (- ___sp 2))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 19 (list (quote normal-variable) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 20 (list (quote lbracket) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 21 (list (quote rbracket) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 22 (list (quote comma) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 22 (list (quote comma) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 23 (list (quote equal) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 23 (list (quote equal) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 24 (list (quote alnum) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 24 (list (quote alnum) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 25 (list (quote letter) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 26 (list (quote digit) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 27 (list (quote newline) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 28 (list (quote space) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($3 (token-value/soft tok)) (@3 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 5))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 3 29 (list (quote quoted) $1 $2 $3) (vector-ref ___stack (- ___sp 3))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 2 30 (list (quote string-inner) $1 $2) (vector-ref ___stack (- ___sp 2))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 30 (list (quote string-inner) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 31 (list (quote string-no-escape) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 2 32 (list (quote line+) $1 $2) (vector-ref ___stack (- ___sp 2))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 32 (list (quote line+) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 2 33 (list (quote space*) $1 $2) (vector-ref ___stack (- ___sp 2))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* () (___push 0 33 (list (quote space*)) (vector-ref ___stack (- ___sp 0))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 2 34 (list (quote space+) $1 $2) (vector-ref ___stack (- ___sp 2))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 34 (list (quote space+) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 2 35 (list (quote arg*) $1 $2) (vector-ref ___stack (- ___sp 2))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* () (___push 0 35 (list (quote arg*)) (vector-ref ___stack (- ___sp 0))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 2 36 (list (quote separated-arg*) $1 $2) (vector-ref ___stack (- ___sp 2))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* () (___push 0 36 (list (quote separated-arg*)) (vector-ref ___stack (- ___sp 0))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 2 37 (list (quote wordc+) $1 $2) (vector-ref ___stack (- ___sp 2))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 37 (list (quote wordc+) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 2 38 (list (quote alnum*) $1 $2) (vector-ref ___stack (- ___sp 2))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* () (___push 0 38 (list (quote alnum*)) (vector-ref ___stack (- ___sp 0))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 2 39 (list (quote digit+) $1 $2) (vector-ref ___stack (- ___sp 2))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 39 (list (quote digit+) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 2 40 (list (quote string-inner*) $1 $2) (vector-ref ___stack (- ___sp 2))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* () (___push 0 40 (list (quote string-inner*)) (vector-ref ___stack (- ___sp 0))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($4 (token-value/soft tok)) (@4 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($3 (token-value/soft tok)) (@3 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 5))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 7))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 4 41 (string $1 $2 $3 $4) (vector-ref ___stack (- ___sp 4))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 2 42 (string $1 $2) (vector-ref ___stack (- ___sp 2))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 43 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 43 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 43 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 43 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 44 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 44 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 45 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 45 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 45 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 45 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 45 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 45 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 45 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 45 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 45 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 45 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 45 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 45 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 45 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 45 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 45 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 45 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 45 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 45 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 45 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 45 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 45 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 46 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 46 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 46 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 46 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 46 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 46 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 46 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 46 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 46 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 46 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 46 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 46 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 46 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 46 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 46 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 46 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 46 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 46 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 46 $1 (vector-ref ___stack (- ___sp 1))))))) (lambda (___scanner ___errorp) (define get-next-token (let () (define evaluator (lambda (x) (cond ((equal? x #\%) (quote uid_3)) ((equal? x #\-) (quote uid_4)) ((equal? x #\<) (quote uid_5)) ((equal? x #\>) (quote uid_6)) ((equal? x #\$) (quote uid_7)) ((equal? x #\() (quote uid_8)) ((equal? x #\)) (quote uid_9)) ((equal? x #\,) (quote uid_10)) ((equal? x #\+) (quote uid_11)) ((equal? x #\=) (quote uid_12)) ((equal? x #\:) (quote uid_13)) ((equal? x #\newline) (quote uid_16)) ((equal? x #\") (quote uid_18)) ((equal? x #\\) (quote uid_19)) ((equal? x #\_) (quote uid_25)) ((equal? x #\r) (quote uid_28)) ((equal? x #\u) (quote uid_29)) ((equal? x #\l) (quote uid_30)) ((equal? x #\e) (quote uid_31)) (((lambda (c) (and (char? c) (char-numeric? c))) x) (quote uid_15)) (((lambda (c) (and (char? c) (char-alphabetic? c) (char-upper-case? c))) x) (quote uid_22)) (((lambda (c) (and (char? c) (char-alphabetic? c) (char-lower-case? c))) x) (quote uid_23)) (((lambda (c) (and (char? c) (char-alphabetic? c) (not (char-upper-case? c)) (not (char-lower-case? c)))) x) (quote uid_24)) ((and ((lambda (c) (and (char? c) (char-whitespace? c))) x) (not (equal? x #\newline))) (quote uid_26)) ((and ((lambda (c) (and (char? c) (not (char-alphabetic? c)) (not (char-numeric? c)) (not (char-whitespace? c)))) x) (not (equal? x #\")) (not (equal? x #\\)) (not (equal? x #\_)) (not (equal? x #\:)) (not (equal? x #\=)) (not (equal? x #\+)) (not (equal? x #\,)) (not (equal? x #\))) (not (equal? x #\()) (not (equal? x #\$)) (not (equal? x #\>)) (not (equal? x #\<)) (not (equal? x #\-)) (not (equal? x #\%))) (quote uid_27)) (else #f)))) (define offset 0) (define linenum 0) (define colnum 0) (define (adjust-positions! c) (set! offset (+ offset 1)) (define nl? (equal? c #\newline)) (when nl? (set! linenum (+ linenum 1))) (set! colnum (if nl? 0 (+ 1 colnum)))) (define read-next-char (cond ((string? ___scanner) (let ((input-length (string-length ___scanner))) (lambda _ (if (>= offset input-length) (eof-object) (string-ref ___scanner offset))))) ((port? ___scanner) (lambda _ (read-char ___scanner))) ((procedure? ___scanner) ___scanner) (else (___errorp (quote unsupported-input-type) "Type error: unsupported input type: ~s" ___scanner)))) (define parselynn:token:typetag (quote *lexical-token*)) (define (parselynn:token:make category source value) (vector parselynn:token:typetag category source value)) (define (wrap-return c category) (define location (vector (quote *stdin*) linenum colnum offset 1)) (parselynn:token:make category location c)) (lambda args (define c (read-next-char)) (if (eof-object? c) (quote *eoi*) (let () (define category (or (evaluator c) (___errorp (quote unrecognized-input) "Type error: unrecognized input: ~s" c))) (adjust-positions! c) (wrap-return c category)))))) (define *initial-stack-size* 500) (define ___atable action-table) (define ___gtable goto-table) (define ___rtable reduction-table) (define ___stack #f) (define ___sp 0) (define ___curr-input #f) (define ___reuse-input #f) (define ___input #f) (define (___consume) (set! ___input (if ___reuse-input ___curr-input (get-next-token))) (set! ___reuse-input #f) (set! ___curr-input ___input)) (define (___pushback) (set! ___reuse-input #t)) (define (___initstack) (set! ___stack (make-vector *initial-stack-size* 0)) (set! ___sp 0)) (define (___growstack) (let ((new-stack (make-vector (* 2 (vector-length ___stack)) 0))) (let loop ((i (- (vector-length ___stack) 1))) (if (>= i 0) (begin (vector-set! new-stack i (vector-ref ___stack i)) (loop (- i 1))))) (set! ___stack new-stack))) (define (___checkstack) (if (>= ___sp (vector-length ___stack)) (___growstack))) (define (___push delta new-category lvalue tok) (set! ___sp (- ___sp (* delta 2))) (let* ((state (vector-ref ___stack ___sp)) (new-state (cdr (assoc new-category (vector-ref ___gtable state))))) (set! ___sp (+ ___sp 2)) (___checkstack) (vector-set! ___stack ___sp new-state) (vector-set! ___stack (- ___sp 1) (note-source-location lvalue tok)))) (define (___reduce st) ((vector-ref ___rtable st) ___stack ___sp ___gtable ___push ___pushback)) (define (___shift token attribute) (set! ___sp (+ ___sp 2)) (___checkstack) (vector-set! ___stack (- ___sp 1) attribute) (vector-set! ___stack ___sp token)) (define (___action x l) (let ((y (assoc x l))) (if y (cadr y) (cadar l)))) (define (___recover tok) (let find-state ((sp ___sp)) (if (< sp 0) (set! ___sp sp) (let* ((state (vector-ref ___stack sp)) (act (assoc (quote error) (vector-ref ___atable state)))) (if act (begin (set! ___sp sp) (___sync (cadr act) tok)) (find-state (- sp 2))))))) (define (___sync state tok) (let ((sync-set (map car (cdr (vector-ref ___atable state))))) (set! ___sp (+ ___sp 4)) (___checkstack) (vector-set! ___stack (- ___sp 3) #f) (vector-set! ___stack (- ___sp 2) state) (let skip () (let ((i (token-category/soft ___input))) (if (equal? i (quote *eoi*)) (set! ___sp -1) (if (memq i sync-set) (let ((act (assoc i (vector-ref ___atable state)))) (vector-set! ___stack (- ___sp 1) #f) (vector-set! ___stack ___sp (cadr act))) (begin (___consume) (skip)))))))) (define (___run) (let loop () (if ___input (let* ((state (vector-ref ___stack ___sp)) (i (token-category/soft ___input)) (act (___action i (vector-ref ___atable state)))) (cond ((not (symbol? i)) (when ___errorp (___errorp (quote invalid-token) "Syntax error: invalid token: ~s" ___input)) #f) ((equal? act (quote accept)) (vector-ref ___stack 1)) ((equal? act (quote *error*)) (if (equal? i (quote *eoi*)) (begin (when ___errorp (___errorp (quote end-of-input) "Syntax error: unexpected end of input: ~s" ___input)) #f) (begin (when ___errorp (___errorp (quote unexpected-token) "Syntax error: unexpected token: ~s" ___input)) (___recover i) (if (>= ___sp 0) (set! ___input #f) (begin (set! ___sp 0) (set! ___input (quote *eoi*)))) (loop)))) ((>= act 0) (___shift act ___input) (set! ___input (if (equal? i (quote *eoi*)) (quote *eoi*) #f)) (loop)) (else (___reduce (- act)) (loop)))) (let* ((state (vector-ref ___stack ___sp)) (acts (vector-ref ___atable state)) (defact (if (pair? acts) (cadar acts) #f))) (if (and (= 1 (length acts)) (< defact 0)) (___reduce (- defact)) (___consume)) (loop))))) (set! ___input #f) (set! ___reuse-input #f) (___initstack) (___run)))) #()))) (h527afc6bh66cls9w1vl (unquote (quote ((flatten: consequents antecedents) (join: tag) (skip: implication) (inline: space)))))))))))