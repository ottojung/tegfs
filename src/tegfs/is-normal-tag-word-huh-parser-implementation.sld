(define-library (tegfs is-normal-tag-word-huh-parser-implementation) (export is-normal-tag-word?:parser:implementation) (import (scheme base)) (import (scheme char)) (import (euphrates parselynn-simple-deserialize-lists)) (begin (define is-normal-tag-word?:parser:implementation (parselynn:simple:deserialize/lists (quasiquote ((l5d989nov8cra7snamcw (unquote (quote (:grammar (main = normal-word tag = flat-tag / sexp-tag flat-tag = word arg* arg = equal idset idset = variable comma idset / variable sexp-tag = lbracket space* word separated-arg* space* rbracket separated-arg = space+ variable word = normal-word / quoted-word normal-word = wordc+ quoted-word = quoted wordc = alnum / "%" / "-" / "<" / ">" variable = normal-variable / quoted-variable quoted-variable = quoted / "$" normal-variable = letter alnum* / digit+ lbracket = "(" rbracket = ")" comma = "," / "+" equal = "=" / ":" alnum = letter / digit letter = (or (class alphabetic) "_") digit = (class numeric) newline = "\n" space = (class whitespace) quoted = "\"" string-inner* "\"" string-inner = "\\" (class any) / string-no-escape string-no-escape = (and (class any) (not #\") (not #\\))))))) (cqqn4gukh9w0rx195m2c (unquote (quote *serialized-lalr-scm-parser*))) (vasml2yhpvo1iq0ofir7 (unquote (quote first))) (nx8lw4j8m9qkhnks1lnb (unquote (quote lr-driver))) (ill9vlxm3pyptw40uotx (unquote (quote (uid_1 uid_2 uid_3 uid_4 uid_5 uid_6 uid_7 uid_8 uid_9 uid_10 uid_11 uid_13 uid_14 uid_16 uid_17 uid_20 uid_21 uid_22 uid_23 uid_24 uid_25)))) (qofpa1t73vde5nivj6d9 (unquote (quote ((main (normal-word)) (tag (flat-tag) (sexp-tag)) (flat-tag (word arg*)) (arg (equal idset)) (idset (variable comma idset) (variable)) (sexp-tag (lbracket space* word separated-arg* space* rbracket)) (separated-arg (space+ variable)) (word (normal-word) (quoted-word)) (normal-word (wordc+)) (quoted-word (quoted)) (wordc (alnum) (uid_1) (uid_2) (uid_3) (uid_4)) (variable (normal-variable) (quoted-variable)) (quoted-variable (quoted) (uid_5)) (normal-variable (letter alnum*) (digit+)) (lbracket (uid_6)) (rbracket (uid_7)) (comma (uid_8) (uid_9)) (equal (uid_10) (uid_11)) (alnum (letter) (digit)) (letter (uid_12)) (digit (uid_13)) (newline (uid_14)) (space (uid_15)) (quoted (uid_16 string-inner* uid_16)) (string-inner (uid_17 uid_18) (string-no-escape)) (string-no-escape (uid_19)) (arg* (arg arg*) ()) (space* (space space*) ()) (separated-arg* (separated-arg separated-arg*) ()) (space+ (space space+) (space)) (wordc+ (wordc wordc+) (wordc)) (alnum* (alnum alnum*) ()) (digit+ (digit digit+) (digit)) (string-inner* (string-inner string-inner*) ()) (uid_12 (uid_20) : $1 (uid_21) : $1 (uid_22) : $1 (uid_23) : $1) (uid_15 (uid_14) : $1 (uid_24) : $1) (uid_18 (uid_13) : $1 (uid_20) : $1 (uid_21) : $1 (uid_22) : $1 (uid_14) : $1 (uid_24) : $1 (uid_16) : $1 (uid_17) : $1 (uid_23) : $1 (uid_11) : $1 (uid_10) : $1 (uid_9) : $1 (uid_8) : $1 (uid_7) : $1 (uid_6) : $1 (uid_5) : $1 (uid_4) : $1 (uid_3) : $1 (uid_2) : $1 (uid_1) : $1 (uid_25) : $1) (uid_19 (uid_13) : $1 (uid_20) : $1 (uid_21) : $1 (uid_22) : $1 (uid_14) : $1 (uid_24) : $1 (uid_23) : $1 (uid_11) : $1 (uid_10) : $1 (uid_9) : $1 (uid_8) : $1 (uid_7) : $1 (uid_6) : $1 (uid_5) : $1 (uid_4) : $1 (uid_3) : $1 (uid_2) : $1 (uid_1) : $1 (uid_25) : $1))))) (obs163lvp06p9m10bwjy (unquote #())) (wgq4fdim7f2kx3zj610r (unquote (quote (let () (define (cadar l) (car (cdr (car l)))) (define (drop l n) (cond ((and (> n 0) (pair? l)) (drop (cdr l) (- n 1))) (else l))) (define (take-right l n) (drop l (- (length l) n))) (define (note-source-location lvalue tok) lvalue) (define (token? x) (and (vector? x) (= 4 (vector-length x)) (equal? (vector-ref x 0) (quote *lexical-token*)))) (define (token-category x) (vector-ref x 1)) (define (token-source x) (vector-ref x 2)) (define (token-value x) (vector-ref x 3)) (define (token-category/soft x) (if (token? x) (token-category x) x)) (define (token-source/soft x) (if (token? x) (token-source x) x)) (define (token-value/soft x) (if (token? x) (token-value x) x)) (define action-table (quote #(((*default* *error*) (uid_1 9) (uid_2 8) (uid_3 7) (uid_4 6) (uid_13 5) (uid_20 4) (uid_21 3) (uid_22 2) (uid_23 1)) ((*default* -61)) ((*default* -60)) ((*default* -59)) ((*default* -58)) ((*default* -35)) ((*default* -19)) ((*default* -18)) ((*default* -17)) ((*default* -16)) ((*default* -34)) ((*default* -13)) ((*default* -33)) ((*default* -32)) ((*default* -15)) ((*default* -51) (uid_1 9) (uid_2 8) (uid_3 7) (uid_4 6) (uid_13 5) (uid_20 4) (uid_21 3) (uid_22 2) (uid_23 1)) ((*default* -2)) ((*default* *error*) (*eoi* 19)) ((*default* -50)) ((*default* -1) (*eoi* accept))))) (define goto-table (vector (quote ((35 . 10) (31 . 11) (21 . 12) (20 . 13) (19 . 14) (11 . 15) (9 . 16) (1 . 17))) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((35 . 10) (31 . 18) (21 . 12) (20 . 13) (19 . 14) (11 . 15))) (quote ()) (quote ()) (quote ()) (quote ()))) (lambda (actions) (define (external index . args) (apply (vector-ref actions index) args)) (define reduction-table (vector (quote ()) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) $1)) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 1 (list (quote main) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 2 (list (quote tag) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 2 (list (quote tag) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 2 3 (list (quote flat-tag) $1 $2) (vector-ref ___stack (- ___sp 2))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 2 4 (list (quote arg) $1 $2) (vector-ref ___stack (- ___sp 2))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($3 (token-value/soft tok)) (@3 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 5))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 3 5 (list (quote idset) $1 $2 $3) (vector-ref ___stack (- ___sp 3))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 5 (list (quote idset) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($6 (token-value/soft tok)) (@6 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($5 (token-value/soft tok)) (@5 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 5))) ($4 (token-value/soft tok)) (@4 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 7))) ($3 (token-value/soft tok)) (@3 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 9))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 11))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 6 6 (list (quote sexp-tag) $1 $2 $3 $4 $5 $6) (vector-ref ___stack (- ___sp 6))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 2 7 (list (quote separated-arg) $1 $2) (vector-ref ___stack (- ___sp 2))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 8 (list (quote word) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 8 (list (quote word) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 9 (list (quote normal-word) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 10 (list (quote quoted-word) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 11 (list (quote wordc) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 11 (list (quote wordc) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 11 (list (quote wordc) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 11 (list (quote wordc) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 11 (list (quote wordc) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 12 (list (quote variable) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 12 (list (quote variable) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 13 (list (quote quoted-variable) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 13 (list (quote quoted-variable) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 2 14 (list (quote normal-variable) $1 $2) (vector-ref ___stack (- ___sp 2))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 14 (list (quote normal-variable) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 15 (list (quote lbracket) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 16 (list (quote rbracket) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 17 (list (quote comma) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 17 (list (quote comma) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 18 (list (quote equal) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 18 (list (quote equal) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 19 (list (quote alnum) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 19 (list (quote alnum) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 20 (list (quote letter) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 21 (list (quote digit) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 22 (list (quote newline) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 23 (list (quote space) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($3 (token-value/soft tok)) (@3 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 5))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 3 24 (list (quote quoted) $1 $2 $3) (vector-ref ___stack (- ___sp 3))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 2 25 (list (quote string-inner) $1 $2) (vector-ref ___stack (- ___sp 2))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 25 (list (quote string-inner) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 26 (list (quote string-no-escape) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 2 27 (list (quote arg*) $1 $2) (vector-ref ___stack (- ___sp 2))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* () (___push 0 27 (list (quote arg*)) (vector-ref ___stack (- ___sp 0))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 2 28 (list (quote space*) $1 $2) (vector-ref ___stack (- ___sp 2))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* () (___push 0 28 (list (quote space*)) (vector-ref ___stack (- ___sp 0))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 2 29 (list (quote separated-arg*) $1 $2) (vector-ref ___stack (- ___sp 2))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* () (___push 0 29 (list (quote separated-arg*)) (vector-ref ___stack (- ___sp 0))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 2 30 (list (quote space+) $1 $2) (vector-ref ___stack (- ___sp 2))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 30 (list (quote space+) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 2 31 (list (quote wordc+) $1 $2) (vector-ref ___stack (- ___sp 2))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 31 (list (quote wordc+) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 2 32 (list (quote alnum*) $1 $2) (vector-ref ___stack (- ___sp 2))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* () (___push 0 32 (list (quote alnum*)) (vector-ref ___stack (- ___sp 0))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 2 33 (list (quote digit+) $1 $2) (vector-ref ___stack (- ___sp 2))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 33 (list (quote digit+) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 2 34 (list (quote string-inner*) $1 $2) (vector-ref ___stack (- ___sp 2))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* () (___push 0 34 (list (quote string-inner*)) (vector-ref ___stack (- ___sp 0))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 35 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 35 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 35 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 35 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 36 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 36 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 37 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 37 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 37 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 37 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 37 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 37 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 37 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 37 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 37 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 37 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 37 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 37 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 37 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 37 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 37 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 37 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 37 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 37 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 37 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 37 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 37 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 38 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 38 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 38 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 38 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 38 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 38 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 38 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 38 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 38 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 38 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 38 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 38 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 38 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 38 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 38 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 38 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 38 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 38 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 38 $1 (vector-ref ___stack (- ___sp 1))))))) (lambda (___scanner ___errorp) (define get-next-token (let () (define evaluator (lambda (x) (cond ((equal? x #\%) (quote uid_1)) ((equal? x #\-) (quote uid_2)) ((equal? x #\<) (quote uid_3)) ((equal? x #\>) (quote uid_4)) ((equal? x #\$) (quote uid_5)) ((equal? x #\() (quote uid_6)) ((equal? x #\)) (quote uid_7)) ((equal? x #\,) (quote uid_8)) ((equal? x #\+) (quote uid_9)) ((equal? x #\=) (quote uid_10)) ((equal? x #\:) (quote uid_11)) ((equal? x #\newline) (quote uid_14)) ((equal? x #\") (quote uid_16)) ((equal? x #\\) (quote uid_17)) ((equal? x #\_) (quote uid_23)) (((lambda (c) (and (char? c) (char-numeric? c))) x) (quote uid_13)) (((lambda (c) (and (char? c) (char-alphabetic? c) (char-upper-case? c))) x) (quote uid_20)) (((lambda (c) (and (char? c) (char-alphabetic? c) (char-lower-case? c))) x) (quote uid_21)) (((lambda (c) (and (char? c) (char-alphabetic? c) (not (char-upper-case? c)) (not (char-lower-case? c)))) x) (quote uid_22)) ((and ((lambda (c) (and (char? c) (char-whitespace? c))) x) (not (equal? x #\newline))) (quote uid_24)) ((and ((lambda (c) (and (char? c) (not (char-alphabetic? c)) (not (char-numeric? c)) (not (char-whitespace? c)))) x) (not (equal? x #\")) (not (equal? x #\\)) (not (equal? x #\_)) (not (equal? x #\:)) (not (equal? x #\=)) (not (equal? x #\+)) (not (equal? x #\,)) (not (equal? x #\))) (not (equal? x #\()) (not (equal? x #\$)) (not (equal? x #\>)) (not (equal? x #\<)) (not (equal? x #\-)) (not (equal? x #\%))) (quote uid_25)) (else #f)))) (define offset 0) (define linenum 0) (define colnum 0) (define (adjust-positions! c) (set! offset (+ offset 1)) (define nl? (equal? c #\newline)) (when nl? (set! linenum (+ linenum 1))) (set! colnum (if nl? 0 (+ 1 colnum)))) (define read-next-char (cond ((string? ___scanner) (let ((input-length (string-length ___scanner))) (lambda _ (if (>= offset input-length) (eof-object) (string-ref ___scanner offset))))) ((port? ___scanner) (lambda _ (read-char ___scanner))) ((procedure? ___scanner) ___scanner) (else (___errorp (quote unsupported-input-type) "Type error: unsupported input type: ~s" ___scanner)))) (define parselynn:token:typetag (quote *lexical-token*)) (define (parselynn:token:make category source value) (vector parselynn:token:typetag category source value)) (define (wrap-return c category) (define location (vector (quote *stdin*) linenum colnum offset 1)) (parselynn:token:make category location c)) (lambda args (define c (read-next-char)) (if (eof-object? c) (quote *eoi*) (let () (define category (or (evaluator c) (___errorp (quote unrecognized-input) "Type error: unrecognized input: ~s" c))) (adjust-positions! c) (wrap-return c category)))))) (define *initial-stack-size* 500) (define ___atable action-table) (define ___gtable goto-table) (define ___rtable reduction-table) (define ___stack #f) (define ___sp 0) (define ___curr-input #f) (define ___reuse-input #f) (define ___input #f) (define (___consume) (set! ___input (if ___reuse-input ___curr-input (get-next-token))) (set! ___reuse-input #f) (set! ___curr-input ___input)) (define (___pushback) (set! ___reuse-input #t)) (define (___initstack) (set! ___stack (make-vector *initial-stack-size* 0)) (set! ___sp 0)) (define (___growstack) (let ((new-stack (make-vector (* 2 (vector-length ___stack)) 0))) (let loop ((i (- (vector-length ___stack) 1))) (if (>= i 0) (begin (vector-set! new-stack i (vector-ref ___stack i)) (loop (- i 1))))) (set! ___stack new-stack))) (define (___checkstack) (if (>= ___sp (vector-length ___stack)) (___growstack))) (define (___push delta new-category lvalue tok) (set! ___sp (- ___sp (* delta 2))) (let* ((state (vector-ref ___stack ___sp)) (new-state (cdr (assoc new-category (vector-ref ___gtable state))))) (set! ___sp (+ ___sp 2)) (___checkstack) (vector-set! ___stack ___sp new-state) (vector-set! ___stack (- ___sp 1) (note-source-location lvalue tok)))) (define (___reduce st) ((vector-ref ___rtable st) ___stack ___sp ___gtable ___push ___pushback)) (define (___shift token attribute) (set! ___sp (+ ___sp 2)) (___checkstack) (vector-set! ___stack (- ___sp 1) attribute) (vector-set! ___stack ___sp token)) (define (___action x l) (let ((y (assoc x l))) (if y (cadr y) (cadar l)))) (define (___recover tok) (let find-state ((sp ___sp)) (if (< sp 0) (set! ___sp sp) (let* ((state (vector-ref ___stack sp)) (act (assoc (quote error) (vector-ref ___atable state)))) (if act (begin (set! ___sp sp) (___sync (cadr act) tok)) (find-state (- sp 2))))))) (define (___sync state tok) (let ((sync-set (map car (cdr (vector-ref ___atable state))))) (set! ___sp (+ ___sp 4)) (___checkstack) (vector-set! ___stack (- ___sp 3) #f) (vector-set! ___stack (- ___sp 2) state) (let skip () (let ((i (token-category/soft ___input))) (if (equal? i (quote *eoi*)) (set! ___sp -1) (if (memq i sync-set) (let ((act (assoc i (vector-ref ___atable state)))) (vector-set! ___stack (- ___sp 1) #f) (vector-set! ___stack ___sp (cadr act))) (begin (___consume) (skip)))))))) (define (___run) (let loop () (if ___input (let* ((state (vector-ref ___stack ___sp)) (i (token-category/soft ___input)) (act (___action i (vector-ref ___atable state)))) (cond ((not (symbol? i)) (when ___errorp (___errorp (quote invalid-token) "Syntax error: invalid token: ~s" ___input)) #f) ((equal? act (quote accept)) (vector-ref ___stack 1)) ((equal? act (quote *error*)) (if (equal? i (quote *eoi*)) (begin (when ___errorp (___errorp (quote end-of-input) "Syntax error: unexpected end of input: ~s" ___input)) #f) (begin (when ___errorp (___errorp (quote unexpected-token) "Syntax error: unexpected token: ~s" ___input)) (___recover i) (if (>= ___sp 0) (set! ___input #f) (begin (set! ___sp 0) (set! ___input (quote *eoi*)))) (loop)))) ((>= act 0) (___shift act ___input) (set! ___input (if (equal? i (quote *eoi*)) (quote *eoi*) #f)) (loop)) (else (___reduce (- act)) (loop)))) (let* ((state (vector-ref ___stack ___sp)) (acts (vector-ref ___atable state)) (defact (if (pair? acts) (cadar acts) #f))) (if (and (= 1 (length acts)) (< defact 0)) (___reduce (- defact)) (___consume)) (loop))))) (set! ___input #f) (set! ___reuse-input #f) (___initstack) (___run))))))) (i3bpqtlnzqjz8ileyrpt (unquote ((let () (define (cadar l) (car (cdr (car l)))) (define (drop l n) (cond ((and (> n 0) (pair? l)) (drop (cdr l) (- n 1))) (else l))) (define (take-right l n) (drop l (- (length l) n))) (define (note-source-location lvalue tok) lvalue) (define (token? x) (and (vector? x) (= 4 (vector-length x)) (equal? (vector-ref x 0) (quote *lexical-token*)))) (define (token-category x) (vector-ref x 1)) (define (token-source x) (vector-ref x 2)) (define (token-value x) (vector-ref x 3)) (define (token-category/soft x) (if (token? x) (token-category x) x)) (define (token-source/soft x) (if (token? x) (token-source x) x)) (define (token-value/soft x) (if (token? x) (token-value x) x)) (define action-table (quote #(((*default* *error*) (uid_1 9) (uid_2 8) (uid_3 7) (uid_4 6) (uid_13 5) (uid_20 4) (uid_21 3) (uid_22 2) (uid_23 1)) ((*default* -61)) ((*default* -60)) ((*default* -59)) ((*default* -58)) ((*default* -35)) ((*default* -19)) ((*default* -18)) ((*default* -17)) ((*default* -16)) ((*default* -34)) ((*default* -13)) ((*default* -33)) ((*default* -32)) ((*default* -15)) ((*default* -51) (uid_1 9) (uid_2 8) (uid_3 7) (uid_4 6) (uid_13 5) (uid_20 4) (uid_21 3) (uid_22 2) (uid_23 1)) ((*default* -2)) ((*default* *error*) (*eoi* 19)) ((*default* -50)) ((*default* -1) (*eoi* accept))))) (define goto-table (vector (quote ((35 . 10) (31 . 11) (21 . 12) (20 . 13) (19 . 14) (11 . 15) (9 . 16) (1 . 17))) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((35 . 10) (31 . 18) (21 . 12) (20 . 13) (19 . 14) (11 . 15))) (quote ()) (quote ()) (quote ()) (quote ()))) (lambda (actions) (define (external index . args) (apply (vector-ref actions index) args)) (define reduction-table (vector (quote ()) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) $1)) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 1 (list (quote main) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 2 (list (quote tag) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 2 (list (quote tag) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 2 3 (list (quote flat-tag) $1 $2) (vector-ref ___stack (- ___sp 2))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 2 4 (list (quote arg) $1 $2) (vector-ref ___stack (- ___sp 2))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($3 (token-value/soft tok)) (@3 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 5))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 3 5 (list (quote idset) $1 $2 $3) (vector-ref ___stack (- ___sp 3))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 5 (list (quote idset) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($6 (token-value/soft tok)) (@6 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($5 (token-value/soft tok)) (@5 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 5))) ($4 (token-value/soft tok)) (@4 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 7))) ($3 (token-value/soft tok)) (@3 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 9))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 11))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 6 6 (list (quote sexp-tag) $1 $2 $3 $4 $5 $6) (vector-ref ___stack (- ___sp 6))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 2 7 (list (quote separated-arg) $1 $2) (vector-ref ___stack (- ___sp 2))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 8 (list (quote word) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 8 (list (quote word) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 9 (list (quote normal-word) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 10 (list (quote quoted-word) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 11 (list (quote wordc) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 11 (list (quote wordc) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 11 (list (quote wordc) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 11 (list (quote wordc) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 11 (list (quote wordc) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 12 (list (quote variable) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 12 (list (quote variable) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 13 (list (quote quoted-variable) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 13 (list (quote quoted-variable) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 2 14 (list (quote normal-variable) $1 $2) (vector-ref ___stack (- ___sp 2))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 14 (list (quote normal-variable) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 15 (list (quote lbracket) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 16 (list (quote rbracket) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 17 (list (quote comma) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 17 (list (quote comma) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 18 (list (quote equal) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 18 (list (quote equal) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 19 (list (quote alnum) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 19 (list (quote alnum) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 20 (list (quote letter) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 21 (list (quote digit) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 22 (list (quote newline) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 23 (list (quote space) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($3 (token-value/soft tok)) (@3 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 5))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 3 24 (list (quote quoted) $1 $2 $3) (vector-ref ___stack (- ___sp 3))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 2 25 (list (quote string-inner) $1 $2) (vector-ref ___stack (- ___sp 2))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 25 (list (quote string-inner) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 26 (list (quote string-no-escape) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 2 27 (list (quote arg*) $1 $2) (vector-ref ___stack (- ___sp 2))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* () (___push 0 27 (list (quote arg*)) (vector-ref ___stack (- ___sp 0))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 2 28 (list (quote space*) $1 $2) (vector-ref ___stack (- ___sp 2))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* () (___push 0 28 (list (quote space*)) (vector-ref ___stack (- ___sp 0))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 2 29 (list (quote separated-arg*) $1 $2) (vector-ref ___stack (- ___sp 2))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* () (___push 0 29 (list (quote separated-arg*)) (vector-ref ___stack (- ___sp 0))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 2 30 (list (quote space+) $1 $2) (vector-ref ___stack (- ___sp 2))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 30 (list (quote space+) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 2 31 (list (quote wordc+) $1 $2) (vector-ref ___stack (- ___sp 2))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 31 (list (quote wordc+) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 2 32 (list (quote alnum*) $1 $2) (vector-ref ___stack (- ___sp 2))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* () (___push 0 32 (list (quote alnum*)) (vector-ref ___stack (- ___sp 0))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 2 33 (list (quote digit+) $1 $2) (vector-ref ___stack (- ___sp 2))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 33 (list (quote digit+) $1) (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($2 (token-value/soft tok)) (@2 (token-source/soft tok)) (tok (vector-ref ___stack (- ___sp 3))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 2 34 (list (quote string-inner*) $1 $2) (vector-ref ___stack (- ___sp 2))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* () (___push 0 34 (list (quote string-inner*)) (vector-ref ___stack (- ___sp 0))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 35 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 35 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 35 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 35 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 36 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 36 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 37 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 37 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 37 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 37 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 37 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 37 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 37 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 37 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 37 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 37 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 37 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 37 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 37 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 37 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 37 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 37 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 37 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 37 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 37 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 37 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 37 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 38 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 38 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 38 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 38 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 38 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 38 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 38 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 38 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 38 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 38 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 38 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 38 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 38 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 38 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 38 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 38 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 38 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 38 $1 (vector-ref ___stack (- ___sp 1))))) (lambda (___stack ___sp ___goto-table ___push yypushback) (let* ((tok (vector-ref ___stack (- ___sp 1))) ($1 (token-value/soft tok)) (@1 (token-source/soft tok))) (___push 1 38 $1 (vector-ref ___stack (- ___sp 1))))))) (lambda (___scanner ___errorp) (define get-next-token (let () (define evaluator (lambda (x) (cond ((equal? x #\%) (quote uid_1)) ((equal? x #\-) (quote uid_2)) ((equal? x #\<) (quote uid_3)) ((equal? x #\>) (quote uid_4)) ((equal? x #\$) (quote uid_5)) ((equal? x #\() (quote uid_6)) ((equal? x #\)) (quote uid_7)) ((equal? x #\,) (quote uid_8)) ((equal? x #\+) (quote uid_9)) ((equal? x #\=) (quote uid_10)) ((equal? x #\:) (quote uid_11)) ((equal? x #\newline) (quote uid_14)) ((equal? x #\") (quote uid_16)) ((equal? x #\\) (quote uid_17)) ((equal? x #\_) (quote uid_23)) (((lambda (c) (and (char? c) (char-numeric? c))) x) (quote uid_13)) (((lambda (c) (and (char? c) (char-alphabetic? c) (char-upper-case? c))) x) (quote uid_20)) (((lambda (c) (and (char? c) (char-alphabetic? c) (char-lower-case? c))) x) (quote uid_21)) (((lambda (c) (and (char? c) (char-alphabetic? c) (not (char-upper-case? c)) (not (char-lower-case? c)))) x) (quote uid_22)) ((and ((lambda (c) (and (char? c) (char-whitespace? c))) x) (not (equal? x #\newline))) (quote uid_24)) ((and ((lambda (c) (and (char? c) (not (char-alphabetic? c)) (not (char-numeric? c)) (not (char-whitespace? c)))) x) (not (equal? x #\")) (not (equal? x #\\)) (not (equal? x #\_)) (not (equal? x #\:)) (not (equal? x #\=)) (not (equal? x #\+)) (not (equal? x #\,)) (not (equal? x #\))) (not (equal? x #\()) (not (equal? x #\$)) (not (equal? x #\>)) (not (equal? x #\<)) (not (equal? x #\-)) (not (equal? x #\%))) (quote uid_25)) (else #f)))) (define offset 0) (define linenum 0) (define colnum 0) (define (adjust-positions! c) (set! offset (+ offset 1)) (define nl? (equal? c #\newline)) (when nl? (set! linenum (+ linenum 1))) (set! colnum (if nl? 0 (+ 1 colnum)))) (define read-next-char (cond ((string? ___scanner) (let ((input-length (string-length ___scanner))) (lambda _ (if (>= offset input-length) (eof-object) (string-ref ___scanner offset))))) ((port? ___scanner) (lambda _ (read-char ___scanner))) ((procedure? ___scanner) ___scanner) (else (___errorp (quote unsupported-input-type) "Type error: unsupported input type: ~s" ___scanner)))) (define parselynn:token:typetag (quote *lexical-token*)) (define (parselynn:token:make category source value) (vector parselynn:token:typetag category source value)) (define (wrap-return c category) (define location (vector (quote *stdin*) linenum colnum offset 1)) (parselynn:token:make category location c)) (lambda args (define c (read-next-char)) (if (eof-object? c) (quote *eoi*) (let () (define category (or (evaluator c) (___errorp (quote unrecognized-input) "Type error: unrecognized input: ~s" c))) (adjust-positions! c) (wrap-return c category)))))) (define *initial-stack-size* 500) (define ___atable action-table) (define ___gtable goto-table) (define ___rtable reduction-table) (define ___stack #f) (define ___sp 0) (define ___curr-input #f) (define ___reuse-input #f) (define ___input #f) (define (___consume) (set! ___input (if ___reuse-input ___curr-input (get-next-token))) (set! ___reuse-input #f) (set! ___curr-input ___input)) (define (___pushback) (set! ___reuse-input #t)) (define (___initstack) (set! ___stack (make-vector *initial-stack-size* 0)) (set! ___sp 0)) (define (___growstack) (let ((new-stack (make-vector (* 2 (vector-length ___stack)) 0))) (let loop ((i (- (vector-length ___stack) 1))) (if (>= i 0) (begin (vector-set! new-stack i (vector-ref ___stack i)) (loop (- i 1))))) (set! ___stack new-stack))) (define (___checkstack) (if (>= ___sp (vector-length ___stack)) (___growstack))) (define (___push delta new-category lvalue tok) (set! ___sp (- ___sp (* delta 2))) (let* ((state (vector-ref ___stack ___sp)) (new-state (cdr (assoc new-category (vector-ref ___gtable state))))) (set! ___sp (+ ___sp 2)) (___checkstack) (vector-set! ___stack ___sp new-state) (vector-set! ___stack (- ___sp 1) (note-source-location lvalue tok)))) (define (___reduce st) ((vector-ref ___rtable st) ___stack ___sp ___gtable ___push ___pushback)) (define (___shift token attribute) (set! ___sp (+ ___sp 2)) (___checkstack) (vector-set! ___stack (- ___sp 1) attribute) (vector-set! ___stack ___sp token)) (define (___action x l) (let ((y (assoc x l))) (if y (cadr y) (cadar l)))) (define (___recover tok) (let find-state ((sp ___sp)) (if (< sp 0) (set! ___sp sp) (let* ((state (vector-ref ___stack sp)) (act (assoc (quote error) (vector-ref ___atable state)))) (if act (begin (set! ___sp sp) (___sync (cadr act) tok)) (find-state (- sp 2))))))) (define (___sync state tok) (let ((sync-set (map car (cdr (vector-ref ___atable state))))) (set! ___sp (+ ___sp 4)) (___checkstack) (vector-set! ___stack (- ___sp 3) #f) (vector-set! ___stack (- ___sp 2) state) (let skip () (let ((i (token-category/soft ___input))) (if (equal? i (quote *eoi*)) (set! ___sp -1) (if (memq i sync-set) (let ((act (assoc i (vector-ref ___atable state)))) (vector-set! ___stack (- ___sp 1) #f) (vector-set! ___stack ___sp (cadr act))) (begin (___consume) (skip)))))))) (define (___run) (let loop () (if ___input (let* ((state (vector-ref ___stack ___sp)) (i (token-category/soft ___input)) (act (___action i (vector-ref ___atable state)))) (cond ((not (symbol? i)) (when ___errorp (___errorp (quote invalid-token) "Syntax error: invalid token: ~s" ___input)) #f) ((equal? act (quote accept)) (vector-ref ___stack 1)) ((equal? act (quote *error*)) (if (equal? i (quote *eoi*)) (begin (when ___errorp (___errorp (quote end-of-input) "Syntax error: unexpected end of input: ~s" ___input)) #f) (begin (when ___errorp (___errorp (quote unexpected-token) "Syntax error: unexpected token: ~s" ___input)) (___recover i) (if (>= ___sp 0) (set! ___input #f) (begin (set! ___sp 0) (set! ___input (quote *eoi*)))) (loop)))) ((>= act 0) (___shift act ___input) (set! ___input (if (equal? i (quote *eoi*)) (quote *eoi*) #f)) (loop)) (else (___reduce (- act)) (loop)))) (let* ((state (vector-ref ___stack ___sp)) (acts (vector-ref ___atable state)) (defact (if (pair? acts) (cadar acts) #f))) (if (and (= 1 (length acts)) (< defact 0)) (___reduce (- defact)) (___consume)) (loop))))) (set! ___input #f) (set! ___reuse-input #f) (___initstack) (___run)))) #()))) (h527afc6bh66cls9w1vl (unquote (quote ())))))))))